% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CairoBasic.R
\name{CairoBasic}
\alias{CairoBasic}
\title{Cairo Basic R6 Wrapper}
\description{
Cairo Basic R6 Wrapper

Cairo Basic R6 Wrapper
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{cr}}{cairo context}

\item{\code{surface}}{cairo surface}

\item{\code{width, height}}{dimensions of canvas}

\item{\code{flipy}}{flip the y axis so origin is at bottom left? default: TRUE}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{width, height}}{dimensions of canvas}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CairoBasic$new()}}
\item \href{#method-show}{\code{CairoBasic$show()}}
\item \href{#method-write_png}{\code{CairoBasic$write_png()}}
\item \href{#method-as_raster}{\code{CairoBasic$as_raster()}}
\item \href{#method-as_array}{\code{CairoBasic$as_array()}}
\item \href{#method-add_circles}{\code{CairoBasic$add_circles()}}
\item \href{#method-add_line_segments}{\code{CairoBasic$add_line_segments()}}
\item \href{#method-add_polygons}{\code{CairoBasic$add_polygons()}}
\item \href{#method-add_rectangles}{\code{CairoBasic$add_rectangles()}}
\item \href{#method-add_text}{\code{CairoBasic$add_text()}}
\item \href{#method-clone}{\code{CairoBasic$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialise
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$new(width, height, bg = "white", flipy = TRUE, antialias = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{width, height}}{dimensions of canvas}

\item{\code{bg}}{initial background colour}

\item{\code{flipy}}{flip the y axis such that the origin is at the lower-left.
default: TRUE.  If FALSE, then origin is at top-left of
canvas}

\item{\code{antialias}}{logical. default TRUE.  If FALSE, then antialiasing will
       be turned off and the everything will look a lot jaggier, but
       will render much faster.
Show the surface in the plotting window}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-show"></a>}}
\if{latex}{\out{\hypertarget{method-show}{}}}
\subsection{Method \code{show()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$show(interpolate = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{interpolate}}{interpolate pixels for plotting the raster
Save surface as PNG}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-write_png"></a>}}
\if{latex}{\out{\hypertarget{method-write_png}{}}}
\subsection{Method \code{write_png()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$write_png(filename)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{PNG filename
Get the surface as a raster object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_raster"></a>}}
\if{latex}{\out{\hypertarget{method-as_raster}{}}}
\subsection{Method \code{as_raster()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$as_raster(nchannel = 3)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nchannel}}{integer value. 1 = grey, 3 = rgb, 4 = rgba. Default: 3}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Raster object
Get the surface as an array object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_array"></a>}}
\if{latex}{\out{\hypertarget{method-as_array}{}}}
\subsection{Method \code{as_array()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$as_array(nchannel = 3)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nchannel}}{integer value. 1 = grey, 3 = rgb, 4 = rgba. Default: 3}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Array
Add circles
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_circles"></a>}}
\if{latex}{\out{\hypertarget{method-add_circles}{}}}
\subsection{Method \code{add_circles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$add_circles(
  x,
  y,
  r,
  linewidth = 1,
  fill = "black",
  colour = NA,
  color = colour
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y}}{centres of the circles}

\item{\code{r}}{radius of circles}

\item{\code{linewidth}}{line width. default: 1

Add line segments}

\item{\code{fill, colour}}{fill and stroke colours. set to NA to not stroke or
fill.  May be an R colour name or a hex colour}

\item{\code{color}}{same as 'colour'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_line_segments"></a>}}
\if{latex}{\out{\hypertarget{method-add_line_segments}{}}}
\subsection{Method \code{add_line_segments()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$add_line_segments(
  x1,
  y1,
  x2,
  y2,
  linewidth = 1,
  colour = "black",
  color = colour
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x1, y1, x2, y2}}{segment endpoint coordinates}

\item{\code{linewidth}}{line width. default: 1
Add polygons}

\item{\code{colour}}{segment colour}

\item{\code{color}}{same as 'colour'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_polygons"></a>}}
\if{latex}{\out{\hypertarget{method-add_polygons}{}}}
\subsection{Method \code{add_polygons()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$add_polygons(
  x,
  y,
  idx,
  linewidth = 1,
  fill = "black",
  colour = NA,
  color = colour
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y}}{polygon coordinates}

\item{\code{idx}}{An integer vector used to separate locations in x and y into
multiple polygons. Specifies consecutive blocks of locations which
make up separate polygons.}

\item{\code{linewidth}}{line width. default: 1
Add rectangles}

\item{\code{fill, colour}}{fill and stroke colours. set to NA to not stroke or
fill.  May be an R colour name or a hex colour}

\item{\code{color}}{same as 'colour'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_rectangles"></a>}}
\if{latex}{\out{\hypertarget{method-add_rectangles}{}}}
\subsection{Method \code{add_rectangles()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$add_rectangles(
  x,
  y,
  width,
  height,
  linewidth = 1,
  fill = "black",
  colour = NA,
  color = colour
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x, y, width, height}}{rectangle positions}

\item{\code{linewidth}}{line width. default: 1
Add text}

\item{\code{fill, colour}}{fill and stroke colours. set to NA to not stroke or
fill.  May be an R colour name or a hex colour}

\item{\code{color}}{same as 'colour'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_text"></a>}}
\if{latex}{\out{\hypertarget{method-add_text}{}}}
\subsection{Method \code{add_text()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$add_text(
  text,
  x,
  y,
  fontsize = 20,
  angle = 0,
  center = FALSE,
  colour = "black",
  color = colour,
  family = "sans"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{text string}

\item{\code{x, y}}{position}

\item{\code{fontsize}}{font size}

\item{\code{angle}}{angle in degrees}

\item{\code{center}}{center the text at the give x,y position. default FALSE}

\item{\code{colour}}{text colour}

\item{\code{color}}{same as 'colour'}

\item{\code{family}}{'sans' or 'serif'}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CairoBasic$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
